services:
  postgres:
    container_name: postgres
    image: postgres:16
    restart: always
    environment:
      - POSTGRES_DB=${DB_DATABASE}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${DB_USER}']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - '${DB_PORT}:5432'

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:8.6
    restart: always
    environment:
      - PGADMIN_DEFAULT_EMAIL=myemail@gmail.com
      - PGADMIN_DEFAULT_PASSWORD=a12345678
    depends_on:
      - postgres
    volumes:
      - ./servers_pgadmin.json:/pgadmin4/servers.json
    ports:
      - '5050:80'

  mongo:
    image: mongo:7.0
    container_name: mongodb
    command:
      [
        '--replSet',
        'rs0',
        '--bind_ip_all',
        '--port',
        '27017',
        '--keyFile',
        '/etc/secrets/mongo-keyfile',
      ]
    ports:
      - '27017:27017'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "echo 'rs.status().ok || rs.initiate()' | mongosh --quiet",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - mongo-data:/data/db
      - mongo-config:/data/configdb
      - ./mongo-keyfile:/etc/secrets/mongo-keyfile:ro

  mongo_setup:
    image: mongo:7.0
    container_name: mongo_setup
    depends_on:
      - mongo
    entrypoint: >
      bash -c "
      sleep 5;
      echo 'Waiting for MongoDB to be ready...';
      until mongosh --host mongodb --port 27017 -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'print(\"MongoDB is ready\")'; do
        sleep 2;
      done;
      echo 'MongoDB is ready';

      # Vérifier si le Replica Set est déjà initialisé
      RS_STATUS=\$(mongosh --quiet --host mongodb --port 27017 -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'rs.status().ok');
      if [ \"\$RS_STATUS\" != \"1\" ]; then
        echo 'Initiating replica set...';
        mongosh --quiet --host mongodb --port 27017 -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'rs.initiate({_id: \"rs0\", members: [{ _id: 0, host: \"mongodb:27017\" }]})';
      else
        echo 'Replica set already initialized';
      fi
      "
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    networks:
      - default

  mongo-express:
    container_name: mongo-express
    image: mongo-express:1.0
    restart: always
    ports:
      - '8082:8081'
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_BASICAUTH=false
    depends_on:
      mongo:
        condition: service_healthy

  redis:
    container_name: redis
    image: redis:7.4-alpine
    restart: always
    ports:
      - 6379:6379

volumes:
  mongo-data:
  mongo-config:
  postgres_volume:
